{"version":3,"sources":["components/emojiTranslator.tsx","constants/general.ts","App.tsx","index.tsx"],"names":["allEmojis","require","emojiData","EmojiTranslator","useState","inputText","setInputText","outputText","setOutputText","warningText","setWarningText","useEffect","inputTextbox","document","getElementById","value","getEmojisForWord","emojisFound","originalWord","word","toLowerCase","isSingular","length","slice","isPlural","isVerbedSimple","isVerbedVowel","isVerbedDoubled","indexOf","verb","substr","emoji","keywords","includes","console","log","push","Container","Row","Col","sm","md","size","offset","Input","className","placeholder","type","name","id","onChange","event","target","handleChange","Button","color","onClick","output","split","forEach","Math","floor","random","translateToEmoji","clearTextBoxes","App","role","aria-label","ReactDOM","render"],"mappings":"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","file":"static/js/main.4b5fec37.chunk.js","sourcesContent":["// React\nimport React, { useState, useEffect } from 'react';\n\n// React Bootstrap\nimport { Container, Row, Col, Input, Button } from 'reactstrap';\n\n// CSS\nimport './emojiTranslator.scss';\n\n// Constants\nimport { translate, clear, warning } from '../constants/general';\n\n// Emoji Library\nconst allEmojis = require('emojilib');\nconst emojiData = require('unicode-emoji-json');\n\nconst EmojiTranslator = () => {\n  const [inputText, setInputText] = useState('');\n  const [outputText, setOutputText] = useState('');\n  const [warningText, setWarningText] = useState('');\n\n  useEffect(() => {}, [outputText]);\n\n  useEffect(() => {\n    const inputTextbox = document.getElementById(\n      'translateText',\n    ) as HTMLInputElement;\n    if (inputTextbox) inputTextbox.value = warningText;\n  }, [warningText]);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    //@ts-ignore\n    setInputText(event.target.value);\n  };\n\n  const translateToEmoji = () => {\n    let emojisFound: any[] = [];\n    let output = '';\n    if (!inputText) {\n      setWarningText(warning);\n      return;\n    }\n    const inputWords = inputText.split(' ');\n\n    inputWords.forEach((word: string) => {\n      emojisFound = [];\n      getEmojisForWord(emojisFound, word);\n\n      if (emojisFound.length > 0) {\n        output =\n          output +\n          ' ' +\n          emojisFound[Math.floor(Math.random() * emojisFound.length)];\n      } else {\n        output = output + ' ' + word;\n      }\n    });\n\n    setOutputText(output);\n  };\n\n  const getEmojisForWord = (emojisFound: any[], originalWord: string) => {\n    let word = originalWord.toLowerCase();\n\n    if (!word || word === '' || word === 'a' || word === 'it' || word === 'is')\n      return '';\n\n    let isSingular = '';\n    if (word.length > 2 && word[word.length - 1] === 's') {\n      isSingular = word.slice(0, word.length - 1);\n    }\n\n    let isPlural = word.length === 1 ? '' : word + 's';\n\n    let isVerbedSimple = '';\n    let isVerbedVowel = '';\n    let isVerbedDoubled = '';\n\n    if (word.indexOf('ing') !== -1) {\n      let verb = word.substr(0, word.length - 3);\n      isVerbedSimple = verb;\n      isVerbedVowel = verb + 'e';\n      isVerbedDoubled = verb.substr(0, verb.length - 1);\n    }\n\n    for (let emoji in emojiData) {\n      let keywords = allEmojis[emoji];\n\n      if (\n        allEmojis[emoji].includes(word) ||\n        emoji === word ||\n        emoji === word + '_face' ||\n        emoji === isSingular ||\n        emoji === isPlural ||\n        emoji === isVerbedSimple ||\n        emoji === isVerbedVowel ||\n        emoji === isVerbedDoubled ||\n        (keywords && keywords.indexOf(word) >= 0) ||\n        (keywords && keywords.indexOf(isSingular) >= 0) ||\n        (keywords && keywords.indexOf(isPlural) >= 0) ||\n        (keywords && keywords.indexOf(isVerbedSimple) >= 0) ||\n        (keywords && keywords.indexOf(isVerbedVowel) >= 0) ||\n        (keywords && keywords.indexOf(isVerbedDoubled) >= 0)\n      ) {\n        console.log('push');\n        console.log(keywords);\n        console.log(emoji);\n        emojisFound.push(emoji);\n      }\n    }\n  };\n\n  const clearTextBoxes = () => {\n    const inputTextbox = document.getElementById(\n      'translateText',\n    ) as HTMLInputElement;\n    if (inputTextbox) inputTextbox.value = '';\n    setInputText('');\n    setOutputText('');\n  };\n\n  return (\n    <Container>\n      <Row>\n        <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\n          <Input\n            className=\"text-input\"\n            placeholder=\"Text to Translate to Emoji's\"\n            type=\"textarea\"\n            name=\"text\"\n            id=\"translateText\"\n            onChange={(event) => {\n              handleChange(event);\n            }}\n          />\n        </Col>\n      </Row>\n      <Row>\n        <Col className=\"buttons\" sm=\"12\" md={{ size: 6, offset: 3 }}>\n          <Button\n            color=\"primary\"\n            className=\"buttons__translate\"\n            onClick={(event) => {\n              translateToEmoji();\n            }}\n          >\n            {translate}\n          </Button>\n          <Button\n            color=\"primary\"\n            className=\"buttons__clear\"\n            onClick={(event) => {\n              clearTextBoxes();\n            }}\n          >\n            {clear}\n          </Button>\n        </Col>\n      </Row>\n\n      <Row>\n        <Col className=\"text-output\" sm=\"12\" md={{ size: 6, offset: 3 }}>\n          {outputText}\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nEmojiTranslator.propTypes = {};\n\nexport default EmojiTranslator;\n","export const headerText = ' Translate text to Emojis ';\n\nexport const translate = 'Translate';\nexport const clear = 'Clear';\n\nexport const warning = 'Please change the InputText in order to translate';\n","// React\nimport React from 'react';\n\n// CSS\nimport './App.scss';\n\n// Constants\nimport { headerText } from './constants/general';\n\nimport EmojiTranslator from './components/emojiTranslator';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"header-text\">\n        <p>\n          <span role=\"img\" aria-label=\"on-fire\">\n            ðŸ”¥ðŸ”¥ðŸ”¥\n          </span>\n          {headerText}\n          <span role=\"img\" aria-label=\"on-fire\">\n            ðŸ”¥ðŸ”¥ðŸ”¥\n          </span>\n        </p>\n      </header>\n      <EmojiTranslator></EmojiTranslator>\n    </div>\n  );\n};\n\nexport default App;\n","// React\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n// React Bootstrap\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}